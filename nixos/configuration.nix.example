{ config, pkgs, lib, ... }:

{
  imports =  [
    ./hardware-configuration.nix # use `nixos-generate-config` with disko config
    ./modules
    ./local/cloud.nix
  ];

  system.stateVersion = throw "Fill it!";

  vonfry = {
    enable = true;
    workspace = {
      home = true;
      server = false;
    };
    userConfiguration = {
      openssh.authorizedKeys.keys = [
      ];
    };
    homeConfiguration = { config, pkgs, lib, ... }:
      {
        home.stateVersion = throw "Fill it!";

        # xsession.enable = lib.mkForce false;

        # home.packages = with pkgs; [
        #   # simplescreenrecorder
        #   mountpoint-s3
        #   restic
        # ];

        xsession.initExtra = ''
          # generate by axrandr
          # ...
        '';

        home.sessionVariables = {
        };

        programs = {
          gpg.settings = {
            # default-key = "";
          };
        };

        vonfry = {
          game.enable = true;
          development = {
          };
        };

        imports = [ ./local/vonfry/cloud.nix ];
      };
  };

  services.xserver.dpi = 96;

  nix.settings = {
    trusted-public-keys = lib.mkBefore [ ];
    cores = 0;
    max-jobs = "auto";
  };

  services.openssh.enable = true;

  security.doas.wheelNeedsPassword = lib.mkForce false;

  boot.supportedFilesystems = [ "ntfs" ];

  virtualisation.vmVariant = {
    virtualisation = {
      memorySize =  8192;
      cores = 16;
    };
  };

  security.pki.certificates = [
  ];

  # programs.adb.enable = true;
  # users.users.vonfry.extraGroups = [ "adbusers" ];

  # programs.nix-ld.enable = true;

  # services.fprintd.enable = true;
  # services.hardware.bolt.enable = true;

  # virtualisation.libvirtd = {
  #   enable = mkDefault (!cfg.workspace.server);
  #   qemu = {
  #     runAsRoot = mkDefault false;
  #     package = mkDefault pkgs.qemu_kvm;
  #     For windows 11 the support of secure boot for ovmf and tpm are needed.
  #     swtpm.enable = true;
  #     vhostUserPackages = [ pkgs.virtiofsd ];
  #     ovmf.packages = [ pkgs.OVMFFull.fd ];
  #   };
  # };

  # boot.kernel.sysctl = {
  #   "net.ipv4.ip_forward" = true; # this is needed by libvirt for nat
  # };

  # networking.hostName = "nixos"; # Define your hostname.
  # networking.hosts = {
  # };
  # networking.firewall = {
  #   enable = true;
  #   allowedTCPPorts = [ ];
  #   allowedTCPPortRanges = [
  #     { from = 5900; to = 5902; } # vnc
  #     { from = 8000; to = 8100; } # for some temporary public service
  #   ];
  #   allowedUDPPorts = [ ];
  #   allowedTCPPortRanges = [];
  #   allowedUDPPorts = [ ];
  # };

  # nesting.clone = [];

  # N.B. boot loader

  # N.B. network
  # networking = {
  #   useDHCP = false;
  #   dhcpcd.enable = false;
  # };
  # systemd.network.networks = {
  #   "10-lan" = {
  #     dns = [ "127.0.0.53:10053" ];
  #     DHCP = "ipv4";
  #     matchConfig.Name = "enp9s0";
  #     linkConfig.RequiredForOnline = true;
  #   };
  #   "50-wlo1" = {
  #     name = "wlo1";
  #     DHCP = "ipv4";
  #     linkConfig.ActivationPolicy = "always-down";
  #   };
  # };



  # environment.systemPackages = with pkgs; [ nvtopPackages.intel intel-gpu-tools ];
}
