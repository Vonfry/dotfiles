{ config, pkgs, lib, ... }:

{
  imports =  [
    ./hardware-configuration.nix # use `nixos-generate-config`
    ./modules
    ./local/proxy.nix
    ./local/mirror.nix
  ];

  vonfry = {
    enable = true;
    user.extraConfig = {
      openssh.authorizedKeys.keys = [];
    };

    network = {
      zerotierNets = [];
    };

    hmConfig =
      { config, pkgs, lib, ... }:

      {
        # sessionVariables must be set after creating these directories.
        home.sessionVariables = {
          DOTFILES_DIR = "${config.home.homeDirectory}/dotfiles";
          CLOUD_DIR    = "${config.home.homeDirectory}/cloud";
          ORG_DIR      = "${config.home.homeDirectory}/orgmode";
          CLONE_LIB    = "${config.home.homeDirectory}/repos";
          LEDGER_FILE  = "${config.home.homeDirectory}/financial/$(date +%Y).journal";
        };

        # xsession.profileExtra = ''
        #   xbow_id=$(xinput list | grep -oE 'SEMITEK USB-HID Gaming Keyboard[[:space:]]+id=([[:digit:]]+)' | head -1 | tail -1 | grep -oE 'id=[[:digit:]]+' | cut -c '4-')
        #   if [ -n "$xbow_id" ]; then
        #     setxkbmap -device $xbow_id -option altwin:swap_alt_win
        #    # setxkbmap -device $codekeyboard_id -option altwin:swap_alt_win
        #   fi
        #   unset xbow_id
        # '';

        vonfry = {
          development = {
            git.signKey = "";
            emacs.preCustom = ''
              (setq-default easy-hugo-basedir (expand-file-name (getenv "CLONE_LIB") "website")
                            enable-local-variables :all
                            enable-local-eval t
              )
            '';
          };
        };

        imports = [ ./local/mail.nix ./local/qutebrowser.nix
                    ./local/proxy-config.nix
                    ./local/emacs.nix
                    ./local/mirror-config.nix
                  ];
      };
  };

  # default nrBuildUsers is same as maxJobs or 32. You may set this variables
  # if your number of cpu threads is larger than 32.
  nix.maxJobs = "auto";

  services.xserver.dpi = 96;
  # services.xserver.videoDrivers = [ "nvidia" ];
  # hardware.nvidia.modesetting.enable = true;
  # hardware.nvidia.prime = {
  #     sync.enable = true;
  #     nvidiaBusId = "PCI:1:0:0";
  #     intelBusId = "PCI:0:2:0";
  # };

  # services.openssh.enable = true;

  boot.supportedFilesystems = [ "ntfs" ];

  # services.fprintd.enable = true;
  # services.hardware.bolt.enable = true;

  # For windows 11 the support of secure boot for ovmf and tpm are needed. 
  # virtualisation.libvirtd.qemu = {
  #   swtpm.enable = true;
  #   ovmf.package = pkgs.OVMFFull;
  # };

  # networking.hostName = "nixos"; # Define your hostname.
  # networking.networkmanager.enable = false;

  # networking.hosts = {
  # };
  # networking.firewall = {
  #   enable = true;
  #   allowedTCPPorts = [ ];
  #   allowedTCPPortRanges = [
  #     { from = 5900; to = 5902; } # vnc
  #   ];
  #   allowedUDPPorts = [ ];
  #   allowedTCPPortRanges = [];
  #   allowedUDPPorts = [ ];
  # };

  # environment.systemPackages = with pkgs; [ krb5 heimdal ];
  # krb5 = {
  #   enable = true;
  #   realms = {
  #     "<realm>" = {
  #       admin_server = "<host>";
  #   kdc = "<host>";
  #     };
  #   };
  #   libdefaults = {
  #     default_realm = "<realm>";
  #   };
  #   extraConfig =
  #     ''
  #     [logging]
  #     kdc = FILE:/var/log/krb5kdc.log
  #     admin_server = FILE:/var/log/kadmin.log
  #     default = FILE:/var/log/krb5lib.log
  #     '';
  # };

  # services.nfs.server = {
  #   enable = true;
  #   exports =
  #     ''
  #     / 10.0.0.0/8(rw,fsid=0,sec=krb5p,no_subtree_check,insecure)
  #     /home/vonfry 10.0.0.0/8(rw,sec=krb5p,no_subtree_check,insecure)
  #     '';
  # };

  # nesting.clone = [];

  # environment.systemPackages = with pkgs; [
  #    # cli browser for network auth with login in web page
  #    browsh elinks w3m lynx
  # ];

  # N.B. boot loader

  # N.B. network

  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";
  # systemd.services.nix-daemon.environment = {
  #   http_proxy  = "prot://user:password@proxy:port";
  #   https_proxy = "prot://user:password@proxy:port";
  #   ftp_proxy   = "prot://user:password@proxy:port";
  # };

}
