{ config, pkgs, lib, ... }:

{
  imports =  [
    ./hardware-configuration.nix # use `nixos-generate-config`
    ./modules
    ./local/proxy.nix
    ./local/mirror.nix
  ];

  vonfry = {
    enable = true;
    userConfiguration = {
      openssh.authorizedKeys.keys = [
      ];
    };
    homeConfiguration = { config, pkgs, lib, ... }:
      {
        # xsession.enable = lib.mkForce false;

        xsession.initExtra = ''
          # . .screenlayout/dual_monitor.sh
        '';

        home.sessionVariables = {
          # GITHUB_TOKEN = "";
        };

        programs = {
          gpg.settings = {
            # default-key = "";
          };
          zsh.shellAliases = {
          };
        };

        vonfry = {
          game.enable = true;
          development = {
            # git.signKey = "";
          };
        };

        imports = [ ./local/vonfry/cloud.nix ];
      };
  };

  services.xserver.dpi = 96;

  nix.settings = {
    trusted-public-keys = lib.mkBefore [ ];
    cores = 0;
    max-jobs = "auto";
  };

  services.openssh.enable = true;

  security.doas.wheelNeedsPassword = lib.mkForce false;

  boot.supportedFilesystems = [ "ntfs" ];

  # services.fprintd.enable = true;
  # services.hardware.bolt.enable = true;

  # For windows 11 the support of secure boot for ovmf and tpm are needed.
  # virtualisation.libvirtd.qemu = {
  #   swtpm.enable = true;
  #   ovmf.packages = [ pkgs.OVMFFull.fd ];
  # };

  # networking.hostName = "nixos"; # Define your hostname.
  # networking.networkmanager.enable = false;

  # networking.hosts = {
  # };
  # networking.firewall = {
  #   enable = true;
  #   allowedTCPPorts = [ ];
  #   allowedTCPPortRanges = [
  #     { from = 5900; to = 5902; } # vnc
  #     { from = 8000; to = 8100; } # for some temporary public service
  #   ];
  #   allowedUDPPorts = [ ];
  #   allowedTCPPortRanges = [];
  #   allowedUDPPorts = [ ];
  # };

  # nesting.clone = [];

  # N.B. boot loader

  # N.B. network

  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";
  # systemd.services.nix-daemon.environment = {
  #   http_proxy  = "prot://user:password@proxy:port";
  #   https_proxy = "prot://user:password@proxy:port";
  #   ftp_proxy   = "prot://user:password@proxy:port";
  # };


  # environment.systemPackages = with pkgs; [ nvtop intel-gpu-tools ];
}
