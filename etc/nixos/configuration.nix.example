{ config, pkgs, lib, ... }:

{
  imports =  [
    ./hardware-configuration.nix # use `nixos-generate-config`
    ./modules
    ./local/proxy.nix
    ./local/mirror.nix
  ];

  vonfry = {
    enable = true;
    userConfiguration = {
      openssh.authorizedKeys.keys = [];
    };

    network = {
      zerotierNets = [];
    };

    homeConfiguration =
      [({ config, pkgs, lib, ... }:

      {
        # sessionVariables must be set after creating these directories.
        home.sessionVariables = {
          DOTFILES_DIR = "${config.home.homeDirectory}/dotfiles";
          CLOUD_DIR    = "${config.home.homeDirectory}/cloud";
          ORG_DIR      = "${config.home.homeDirectory}/orgmode";
          CLONE_LIB    = "${config.home.homeDirectory}/repos";
          LEDGER_FILE  = "${config.home.homeDirectory}/financial/$(date +%Y).journal";
        };

        vonfry = {
          development = {
            git.signKey = "";
          };
        };

        imports = [ ./local/mail.nix ./local/qutebrowser.nix
                    ./local/proxy-config.nix
                    ./local/emacs.nix
                    ./local/mirror-config.nix
                  ];
      })];
  };

  # default nrBuildUsers is same as maxJobs or 32. You may set this variables
  # if your number of cpu threads is larger than 32.
  nix.maxJobs = "auto";

  services.xserver.dpi = 96;

  boot.supportedFilesystems = [ "ntfs" ];

  # services.fprintd.enable = true;
  # services.hardware.bolt.enable = true;

  # For windows 11 the support of secure boot for ovmf and tpm are needed.
  # virtualisation.libvirtd.qemu = {
  #   swtpm.enable = true;
  #   ovmf.packages = [ pkgs.OVMFFull.fd ];
  # };

  # networking.hostName = "nixos"; # Define your hostname.
  # networking.networkmanager.enable = false;

  # networking.hosts = {
  # };
  # networking.firewall = {
  #   enable = true;
  #   allowedTCPPorts = [ ];
  #   allowedTCPPortRanges = [
  #     { from = 5900; to = 5902; } # vnc
  #     { from = 8000; to = 8100; } # for some temporary public service
  #   ];
  #   allowedUDPPorts = [ ];
  #   allowedTCPPortRanges = [];
  #   allowedUDPPorts = [ ];
  # };

  # nesting.clone = [];

  # N.B. boot loader

  # N.B. network

  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";
  # systemd.services.nix-daemon.environment = {
  #   http_proxy  = "prot://user:password@proxy:port";
  #   https_proxy = "prot://user:password@proxy:port";
  #   ftp_proxy   = "prot://user:password@proxy:port";
  # };

}
